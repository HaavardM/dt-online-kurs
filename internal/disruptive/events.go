package disruptive

import (
	"log/slog"
	"strings"
	"time"
)

type EventType string
type AssetType string

const (
	Temperature   EventType = "temperature"
	Touch         EventType = "touch"
	ObjectPresent EventType = "objectPresent"
	NetworkStatus EventType = "networkStatus"

	Fridge  AssetType = "fridge"
	Freezer AssetType = "freezer"
	Door    AssetType = "door"
)

type EventData interface {
	isEventData()
}

// Event is a single event generated by a device.
type Event struct {
	EventId  string
	DeviceID string

	// DeviceLabels is a map of key-value pairs that describe the device.
	DeviceLabels map[string]string

	// Data will be of type `TemperatureEventData`, `ObjectPresentData`,
	// `TouchData` or nil.
	Data      EventData
	Timestamp time.Time
}

type EventHandler func(Event)

// A temperatureEventSchema will be available in event's `Data`
// when the `EventType` is `temperature`.
type TemperatureData struct {
	Celsius float32
}

func (t TemperatureData) isEventData() {}

type ObjectPresentData struct {
	// ObjectPresent will be `true` if an object close to the device
	ObjectPresent bool `json:"objectPresent"`
}

func (t ObjectPresentData) isEventData() {}

type TouchData struct{}

func (t TouchData) isEventData() {}

type rawEvent struct {
	EventId    string `json:"eventId"`
	TargetName string `json:"targetName"`
	EventType  string `json:"eventType"`
	Data       struct {
		Temperature *struct {
			Samples []struct {
				Value float32 `json:"value"`
			} `json:"samples"`
		} `json:"temperature,omitempty"`
		ObjectPresent *struct {
			State string `json:"state"`
		} `json:"objectPresent,omitempty"`
	} `json:"data"`
	Timestamp time.Time `json:"timestamp"`
}

func parseRawEvent(rawEvent rawEvent, labels map[string]string) Event {
	event := Event{
		EventId:   rawEvent.EventId,
		DeviceID:  strings.Split(rawEvent.TargetName, "/")[3],
		Timestamp: rawEvent.Timestamp,

		DeviceLabels: labels,
	}
	// Set event data
	switch rawEvent.EventType {
	case string(Temperature):
		event.Data = TemperatureData{Celsius: rawEvent.Data.Temperature.Samples[0].Value}
	case string(ObjectPresent):
		event.Data = ObjectPresentData{ObjectPresent: rawEvent.Data.ObjectPresent.State == "PRESENT"}
	case string(Touch):
		event.Data = TouchData{}
	case string(NetworkStatus):
		// pass
	default:
		slog.With(slog.String("event_type", rawEvent.EventType)).Warn("unknown event type")
	}
	return event
}
